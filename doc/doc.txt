taille du buffer local à 255 caractères

comportement de synchGetChar

Renvoie le prochain caractère qui sera tapé. Attention, l'appui sur entrée compte comme un caractère qui sera enregistré, deux appels successifs de la forme c\n renverront c puis \n. Cela doit être géré par l'utilisateur.

comportement de putChar

affiche le caractère passé en argument

comportement de synchGetInt
le prochain entier saisi sera enregistré dans l'entier passé en argument. Un entier doit être saisi sinon on ne peut garantir le bon comportement de la fonction.

comportement de synchPutInt
affiche l'entier passé en paramètre

comportement de synchGetString
enregistre la prochaine chaine de caractère saisie à l'adresse passée en paramètre. Le deuxième paramètre permet de modifier la longueur maximale souhaitée pour la chaine (255 caractère maximum). Ajoute automatiquement un \0 en fin de chaine pour raison de sécurité. 

comportement de synchPutString
affiche la chaine de caractère passée en argument. La chaine doit se terminer par un \0

comportement de feof
renvoie vrai si le caractère actuel est une fin de fichier, faux sinon. Permet d'éviter des erreurs dues à des caractères speciaux.

---------------------------------------------------------------------------------------
UserThread.cc / .h :

Comportement de do_UserThreadCreate
renvoie l'adresse du nouveau Thread créé ou -1 si le Thread n'a pas pu être créé. Les paramètres sont : la fonction que le Thread doit exécuter et l'adresse contenant les arguments de la fonction.

Comportement de do_UserThreadExit
envoie un Cond_Broadcast pour libérer les Threads qui ont effectués un Join sur ce Thread puis termine le Thread et le détruit.

Comportement de do_UserThreadJoin
permet d'attendre qu'un Thread se termine. Le paramètre est l'adresse du Thread à attendre.

verifying
sémaphore permettant de synchroniser l'ajout d'un Thread dans la liste des Threads courrants.

starting
sémaphore permettant de synchroniser la création d'un Thread.

ThreadArgs
une structure permettant de stocker en une seule adresse les adresse de la fonction et des arguments de cette fonction pour l'envoyer dans la fonction Fork.

addrspace.cc / .h :

Comportement de addThreadToList
renvoie vrai si le Thread a pu être ajouté à la liste des Threads courrants. Renvoie faux sinon. Le paramètre est l'adresse du Thread à ajouter.

Comportement de removeThreadFromList
retire le Thread de la liste des Threads courrants. Ne revoie rien. Le paramètre est l'adresse du Thread à retirer.

Comportement de findThreadInList
trouve un thread et renvoie la structure CondThread contenant le Thread. Le paramètre est le Thread à rechercher.

ThreadCond
cette structure permet de stocker un Thread et une Condition, permettant la synchronisation des Threads pour le do_UserThreadJoin.

threadList
tableau permettant de stocker les Threads courrants. Les opérations addThreadToList, removeThreadFromList et findThreadInList se font sur ce tableau. C'est un tableau de ThreadCond.

MaxThreads
constante définissant le nombre maximum de Thread qui peuvent être associés à un programme en même temps.
